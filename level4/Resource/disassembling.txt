; main
0x080484a7 <+0>:	push   ebp              ; prolog
0x080484a8 <+1>:	mov    ebp,esp          ; prolog
0x080484aa <+3>:	and    esp,0xfffffff0   ; stack alignement
0x080484ad <+6>:	call   0x8048457 <n>    ; call n
0x080484b2 <+11>:	leave                   ; copy ebp to esp and pop ebp (epilogue)
0x080484b3 <+12>:	ret                     ; return

;n
0x08048457 <+0>:	push   ebp                          ; prolog
0x08048458 <+1>:	mov    ebp,esp                      ; prolog
0x0804845a <+3>:	sub    esp,0x218                    ; sub the stack pointer by 536 bytes
                                                        ; for local variables
0x08048460 <+9>:	mov    eax,ds:0x8049804             ; put stdin stream structure in eax
0x08048465 <+14>:	mov    DWORD PTR [esp+0x8],eax      ; put stdin stream structure from eax
                                                        ; in the stack (esp + 8)
0x08048469 <+18>:	mov    DWORD PTR [esp+0x4],0x200    ; put 512 in the stack (esp + 4)
0x08048471 <+26>:	lea    eax,[ebp-0x208]              ; put a stack address (esp - 520) in eax (buffer)
0x08048477 <+32>:	mov    DWORD PTR [esp],eax          ; put a stack address (esp - 520) from eax
                                                        ; in the stack (esp + 0)
0x0804847a <+35>:	call   0x8048350 <fgets@plt>        ; call fgets to read the user input
                                                        ; [ARG 1] stack frame address pointing
                                                        ;         where to store the user input (buffer)
                                                        ; [ARG 2] the max size of the user input (512)
                                                        ; [ARG 3] the stream structure (stdin) to read
0x080484cc <+40>:	lea    eax,[ebp-0x208]              ; put a stack address (esp - 520) in eax (buffer)
0x080484d2 <+46>:	mov    DWORD PTR [esp],eax          ; put a stack address (esp - 520) from eax
0x08048488 <+49>:	call   0x8048444 <p>                ; call p
                                                        ; [ARG 1] stack frame address pointing
                                                        ;         where to store the user input (buffer)
0x0804848d <+54>:	mov    eax,ds:0x8049810             ; mov the global variable "m" to eax (value 0)
                                                        ; x/x 0x804988c (what is)
0x08048492 <+59>:	cmp    eax,0x1025544                ; compare eax (global variable "m") to 16930116
0x08048497 <+64>:	jne    0x80484a5 <n+78>             ; jump to the end if not equal
0x08048499 <+66>:	mov    DWORD PTR [esp],0x8048590    ; put the string "/bin/cat /home/user/level5/.pass"
                                                        ; from the section .rodata to the stack (esp + 0)
                                                        ; x/s 0x8048590 (to see the string)
                                                        ; info files (to know where 0x8048590 is from) (.rodata)
0x080484a0 <+73>:	call   0x8048360 <system@plt>       ; call system fork and execute the command
                                                        ; [ARG 1] address to the
                                                        ; "/bin/cat /home/user/level5/.pass" string
0x080484a5 <+78>:	leave                               ; copy ebp to esp and pop ebp (epilogue)
0x080484a6 <+79>:	ret                                 ; return

; p
0x08048444 <+0>:	push   ebp                          ; prolog
0x08048445 <+1>:	mov    ebp,esp                      ; prolog
0x08048447 <+3>:	sub    esp,0x18                     ; sub the stack pointer by 24 bytes
0x0804844a <+6>:	mov    eax,DWORD PTR [ebp+0x8]      ; put the first argument from the stack (ebp + 2) in eax
0x0804844d <+9>:	mov    DWORD PTR [esp],eax          ; put the first argument from eax in the stack (esp + 0)
0x08048450 <+12>:	call   0x8048340 <printf@plt>       ; call printf to print in stdout
                                                        ; [ARG 1] stack frame address pointing
                                                        ;         where to store the user input (buffer)
                                                        ;         from the first argument
0x08048455 <+17>:	leave                               ; copy ebp to esp and pop ebp (epilogue)
0x08048456 <+18>:	ret                                 ; return